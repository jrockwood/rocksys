;
; rockasm.rasm (Rockwood Assembler)
; ---------------------------------
; This version simply prints the banner and copyright information to the screen
; using OS-supplied functions to print. After it's done, it will return to the
; kernel.
;
; Copyright (c) 2017 Justin Rockwood. All rights reserved.
;

; [BITS 16]               ; Tells the assembler to use 16 bit code
; [ORG 0x8000]            ; The kernel will load us into this address

; start:
~eb ~7e     ; jmp main

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Data Section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 0x8002
; str_banner:
;     db `RockAsm 0.2 - Rockwood Assembler`, 0
        ~52 ~6f ~63 ~6b ~41 ~73   ~6d ~20 ~30 ~2e ~32 ~20 ~2d ~20
~52 ~6f ~63 ~6b ~77 ~6f ~6f ~64   ~20 ~41 ~73 ~73 ~65 ~6d ~62 ~6c
~65 ~72 ~00

; 0x8023
; str_copyright:
;     db `Copyright (c) 2017 Justin Rockwood. All rights reserved.`, 0
            ~43 ~6f ~70 ~79 ~72   ~69 ~67 ~68 ~74 ~20 ~28 ~63 ~29
~20 ~32 ~30 ~31 ~37 ~20 ~4a ~75   ~73 ~74 ~69 ~6e ~20 ~52 ~6f ~63
~6b ~77 ~6f ~6f ~64 ~2e ~20 ~41   ~6c ~6c ~20 ~72 ~69 ~67 ~68 ~74
~73 ~20 ~72 ~65 ~73 ~65 ~72 ~76   ~65 ~64 ~2e ~00

; 0x805c
; str_done:
;     db `Done`, 0
                                                  ~44 ~6f ~6e ~65
~00

; 0x8061
; str_disk_error:
;     db `Disk error: `, 0
    ~44 ~69 ~73 ~6b ~20 ~65 ~72   ~72 ~6f ~72 ~3a ~20 ~00

; End the data section at 0x80
; times 0x80 - ($ - $$) db 0

                                                          ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x8080
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Program
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; main:
    ; --------------------------------------------------------------------------
    ; Display the loading message.

~68 ~02 ~80 ; push str_banner
~b8 ~06 ~00 ; mov ax, os_print_line
~ff ~d0     ; call ax
~83 ~c4 ~02 ; add sp, 2
~68 ~23 ~80 ; push str_copyright
~b8 ~06 ~00 ; mov ax, os_print_line
~ff ~d0     ; call ax
~83 ~c4 ~02 ; add sp, 2
~b8 ~09 ~00 ; mov ax, os_print_newline
~ff ~d0     ; call ax

    ; --------------------------------------------------------------------------
    ; Compile

~b8 ~00 ~81 ; mov ax, compile
~ff ~d0     ; call ax

    ; --------------------------------------------------------------------------
    ; We're done so print a message and then return to the OS.

; .finished:
~68 ~5c ~80 ; push str_done
~b8 ~06 ~00 ; mov ax, os_print_line
~ff ~d0     ; call ax
~83 ~c4 ~02 ; add sp, 2

; mainExit:
~c3         ; ret

; times 0x100 - ($ - $$) db 0
                                                  ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x8100
; ------------------------------------------------------------------------------
; compile()
;   Read in the file to be assembled starting at the 98th sector (1-based).
;   We'll read in one sector at a time and then just write out the same sector
;   to disk at sector 1074.
; ------------------------------------------------------------------------------

; compile:
~55         ; push bp
~89 ~e5     ; mov bp, sp
~83 ~ec ~06 ; sub sp, 6               ; allocate space for local variables
~c7 ~46 ~fe ~61 ~00 ; mov word [bp - 2], 97   ; src_sector_number
~c7 ~46 ~fc ~31 ~04 ; mov word [bp - 4], 1073 ; dest_sector_number
~c7 ~46 ~fa ~01 ~00 ; mov word [bp - 6], 1    ; should_loop
; .loop:
~68 ~00 ~a0 ; push 0xA000         ; dest_address
~6a ~01     ; push 1              ; sector_count
~ff ~76 ~fe ; push word [bp - 2]  ; sector_number = src_sector_number
~b8 ~21 ~00 ; mov ax, os_read_sectors
~ff ~d0     ; call ax
~83 ~c4 ~06 ; add sp, 6
~b2 ~0a     ; mov dl, 0xa         ; use '0xa' as an error code for reading
~3c ~00     ; cmp al, 0
~74 ~2c     ; je .error

~b8 ~90 ~81 ; mov ax, lex_sector
~ff ~d0     ; call ax
~89 ~46 ~fa ; mov [bp - 6], ax    ; should_loop = ax

~68 ~00 ~a0 ; push 0xA000         ; source_address
~6a ~01     ; push 1              ; sector_count
~ff ~76 ~fc ; push word [bp - 4]  ; sector_number = dest_sector_number
~b8 ~24 ~00 ; mov ax, os_write_sectors
~ff ~d0     ; call ax
~83 ~c4 ~06 ; add sp, 6
~b2 ~0b     ; mov dl, 0xb         ; use '0xb' as an error code for writing
~3c ~00     ; cmp al, 0
~74 ~0e     ; je .error

~ff ~46 ~fe ; inc word [bp - 2]        ; src_sector_number++
~ff ~46 ~fc ; inc word [bp - 4]        ; dest_sector_number++

~83 ~7e ~fa ~00 ; cmp word [bp - 6], 0 ; should_loop
~74 ~20     ; je .exit
~eb ~be     ; jmp .loop
.error:
~68 ~61 ~80 ; push str_disk_error
~b8 ~03 ~00 ; mov ax, os_print_string
~ff ~d0     ; call ax
~58         ; pop ax
~6a ~01     ; push 1              ; should_print_prefix = true
~52         ; push dx
~b8 ~15 ~00 ; mov ax, os_print_byte
~ff ~d0     ; call ax
~83 ~c4 ~04 ; add sp, 4
~b8 ~09 ~00 ; mov ax, os_print_newline
~ff ~d0     ; call ax
~b8 ~1b ~00 ; mov ax, os_print_registers
~ff ~d0     ; call ax
; .exit:
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x190 - ($ - $$) db 0
                                      ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x8190
; ------------------------------------------------------------------------------
; lex_sector()
;   Lexing the input right now consists of reading every byte until we see a
;   null termination or until we've read a sector's worth of data.
;
;   Input
;     None
;   Returns
;     AX - 1 if another sector should be read, 0 if a null termination was read
;          and no more sectors should be read
; ------------------------------------------------------------------------------

; lex_sector:
~55         ; push bp
~89 ~e5     ; mov bp, sp
~83 ~ec ~02 ; sub sp, 2                     ; allocate space for local variables
~c7 ~46 ~fe ~00 ~00 ; mov word [bp - 2], 0  ; byte_count
~be ~00 ~a0 ; mov si, 0xA000
; .loop:
~ac         ; lodsb
~3c ~00     ; cmp al, 0
~74 ~0f     ; je .done
~ff ~46 ~fe ; inc word [bp - 2]   ; byte_count++
~81 ~7e ~fe ~00 ~02 ; cmp word [bp - 2], 512
~7c ~f1     ; jl .loop
~b8 ~01 ~00 ; mov ax, 1
~eb ~03     ; jmp .exit
; .done:
~b8 ~00 ~00 ; mov ax, 0
; .exit:
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x1d0 - ($ - $$) db 0
                                      ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x81d0
