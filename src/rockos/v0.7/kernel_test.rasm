;
; kernel_test.rasm
; ----------------
; Copyright (c) 2017 Justin Rockwood. All rights reserved.
;

; [BITS 16]               ; Tells the assembler to use 16 bit code
; [ORG 0x8000]            ; The kernel will load us into this address

; %include "syscalls.inc"

start:
~e9 ~fd ~01 ; jmp main

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Data Section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 0x8003

            ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; times 0x40 - ($ - $$) db 0

; 0x8040
; str_banner:
;     db 'Kernel unit tests', 0
~4b ~65 ~72 ~6e ~65 ~6c ~20 ~75   ~6e ~69 ~74 ~20 ~74 ~65 ~73 ~74
~73 ~00

; str_running:
;     db 'Running...', 0
        ~52 ~75 ~6e ~6e ~69 ~6e   ~67 ~2e ~2e ~2e ~00

; str_all_tests_passed:
;     db 'All tests passed!', 0
                                                      ~41 ~6c ~6c
~20 ~74 ~65 ~73 ~74 ~73 ~20 ~70   ~61 ~73 ~73 ~65 ~64 ~21 ~00

; str_test_number:
;     db '    Test ', 0
                                                              ~20
~20 ~20 ~20 ~54 ~65 ~73 ~74 ~20   ~00

; str_passed:
;     db ': Passed', 0
                                      ~3a ~20 ~50 ~61 ~73 ~73 ~65
~64 ~00

; str_failed:
;     db ': Failed', 0
        ~3a ~20 ~46 ~61 ~69 ~6c   ~65 ~64 ~00

; str_done:
;     db 'Done: ', 0
                                              ~44 ~6f ~6e ~65 ~3a
~20 ~00

; str_num_passes:
;     db ' passes, ', 0
        ~20 ~70 ~61 ~73 ~73 ~65   ~73 ~2c ~20 ~00

; str_num_failures:
;     db ' failures', 0
                                                  ~20 ~66 ~61 ~69
~6c ~75 ~72 ~65 ~73 ~00

; times 0x200 - ($ - $$) db 0
                        ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x8200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Program
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

main:
    ; --------------------------------------------------------------------------
    ; Display the banner

~68 ~40 ~80     ; push str_banner
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

    ; --------------------------------------------------------------------------
    ; Run the tests

~b8 ~80 ~82     ; mov ax, run_tests
~ff ~d0         ; call ax

mainExit:
~c3             ; ret

; times 0x240 - ($ - $$) db 0
                        ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x8240
; ------------------------------------------------------------------------------
; print_test_number(test_number, passed)
;   Prints the message: "    Test {0}: Passed" or "    Test {0}: Failed".
;
;   Input
;     test_number - the number of the test
;     passed - non-zero if the test passed, 0 if the test failed
;   Returns
;     Nothing
; ------------------------------------------------------------------------------

; print_test_number:
~55             ; push bp
~89 ~e5         ; mov bp, sp

    ; print the prefix
~68 ~6f ~80     ; push str_test_number
~b8 ~03 ~00     ; mov ax, os_print_string
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

    ; print the test number
~6a ~67         ; push 'g'
~ff ~76 ~04     ; push word [bp + 4]
~b8 ~4e ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

    ; print suffix
~83 ~7e ~06 ~00 ; cmp word [bp + 6], 0
~74 ~05         ; je .print_failed
~68 ~79 ~80     ; push str_passed
~eb ~03         ; jmp .print_suffix
; .print_failed:
~68 ~82 ~80     ; push str_failed
; .print_suffix:
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

; .exit:
~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x280 - ($ - $$) db 0
                    ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x8280
; ------------------------------------------------------------------------------
; run_tests()
;   Runs the unit tests.
;
;   Input
;     None
;   Returns
;     Nothing
; ------------------------------------------------------------------------------

run_tests:
~55             ; push bp
~89 ~e5         ; mov bp, sp
~83 ~ec ~04     ; sub sp, 4               ; int pass_count, int fail_count

~c7 ~46 ~fe ~00 ~00 ; mov word [bp - 2], 0    ; pass_count = 0
~c7 ~46 ~fc ~00 ~00 ; mov word [bp - 4], 0    ; fail_count = 0

~68 ~52 ~80     ; push str_running
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

    ; test os_print_int (and os_string_to_int and os_int_to_string)
~89 ~e8         ; mov ax, bp
~83 ~e8 ~04     ; sub ax, 4
~50             ; push ax     ; fail_count = &fail_count
~83 ~c0 ~02     ; add ax, 2
~50             ; push ax     ; pass_count = &pass_count
~b8 ~50 ~84     ; mov ax, test_os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

    ; print a blank line
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

    ; see if we should print the "All tests passed!" message or a count of the failures
~8b ~46 ~fc     ; mov ax, [bp - 4]      ; AX = fail_count
~83 ~f8 ~00     ; cmp ax, 0
~75 ~14         ; jne .some_failures
~68 ~5d ~80     ; push str_all_tests_passed
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax
~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

.some_failures:
    ; print "Done: x passes, y failures"
~68 ~8b ~80     ; push str_done
~b8 ~03 ~00     ; mov ax, os_print_string
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~6a ~67         ; push 'g'
~ff ~76 ~fe     ; push word [bp - 2]    ; number = pass_count
~b8 ~4e ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~68 ~92 ~80     ; push str_num_passes
~b8 ~03 ~00     ; mov ax, os_print_string
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~6a ~67         ; push 'g'
~ff ~76 ~fc     ; push word [bp - 4]    ; number = fail_count
~b8 ~4e ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~68 ~9c ~80     ; push str_num_failures
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

    ; print a blank line
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x400 - ($ - $$) db 0
                        ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x8400
; ------------------------------------------------------------------------------
; test_os_print_int(int *pass_count, int *fail_count)
;   Runs the unit tests for os_print_int, os_int_to_string, and os_string_to_int.
;
;   Input
;     pass_count - pointer to store the count of tests that passed
;     fail_count - pointer to store the count of tests that failed
;   Returns
;     AX - non-zero if all tests succeeded, 0 if one or more tests failed
; ------------------------------------------------------------------------------

; 0x8400
; str_os_print_int:
;     db 'os_print_int', 0
~6f ~73 ~5f ~70 ~72 ~69 ~6e ~74   ~5f ~69 ~6e ~74 ~00

; str_os_print_int_expected:
;     db '  The number 2748 (0xABC) printed in d, g, x, X, 0x, and 0X', 0
                                                      ~20 ~20 ~54
~68 ~65 ~20 ~6e ~75 ~6d ~62 ~65   ~72 ~20 ~32 ~37 ~34 ~38 ~20 ~28
~30 ~78 ~41 ~42 ~43 ~29 ~20 ~70   ~72 ~69 ~6e ~74 ~65 ~64 ~20 ~69
~6e ~20 ~64 ~2c ~20 ~67 ~2c ~20   ~78 ~2c ~20 ~58 ~2c ~20 ~30 ~78
~2c ~20 ~61 ~6e ~64 ~20 ~30 ~58   ~00

; 0x8450
test_os_print_int:
~55             ; push bp
~89 ~e5         ; mov bp, sp
~83 ~ec ~06     ; sub sp, 6               ; int test_number,
                                          ; int pass_count, int fail_count

~c7 ~46 ~fe ~01 ~00 ; mov word [bp - 2], 1    ; test_number = 1
~c7 ~46 ~fc ~00 ~00 ; mov word [bp - 4], 0    ; pass_count = 0
~c7 ~46 ~fa ~00 ~00 ; mov word [bp - 6], 0    ; fail_count = 0

~68 ~00 ~84     ; push str_os_print_int
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~68 ~0d ~84     ; push str_os_print_int_expected
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print 2748
~6a ~64         ; push 'd'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print 2,748
~6a ~67         ; push 'g'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print abc
~6a ~78         ; push 'x'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print ABC
~6a ~58         ; push 'X'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print 0xabc
~68 ~30 ~78     ; push '0x'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print 0XABC
~68 ~30 ~58     ; push '0X'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

    ; print a blank line
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x510 - ($ - $$) db 0
                            ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x8510
