;
; kernel_test.rasm
; ----------------
; Copyright (c) 2020 Justin Rockwood. All rights reserved.
;

; [BITS 16]               ; Tells the assembler to use 16 bit code
; [ORG 0x3000]            ; The kernel will load us into this address

; %include "syscalls.inc"

; start:
~e9 ~fd ~01 ; jmp main

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Data Section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 0x3003

            ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; times 0x40 - ($ - $$) db 0

; 0x3040
; str_banner:
;     db 'Kernel unit tests', 0
~4b ~65 ~72 ~6e ~65 ~6c ~20 ~75   ~6e ~69 ~74 ~20 ~74 ~65 ~73 ~74
~73 ~00

; str_running:
;     db 'Running...', 0
        ~52 ~75 ~6e ~6e ~69 ~6e   ~67 ~2e ~2e ~2e ~00

; str_all_tests_passed:
;     db 'All tests passed!', 0
                                                      ~41 ~6c ~6c
~20 ~74 ~65 ~73 ~74 ~73 ~20 ~70   ~61 ~73 ~73 ~65 ~64 ~21 ~00

; str_test_number:
;     db '    Test ', 0
                                                              ~20
~20 ~20 ~20 ~54 ~65 ~73 ~74 ~20   ~00

; str_passed:
;     db ': Passed', 0
                                      ~3a ~20 ~50 ~61 ~73 ~73 ~65
~64 ~00

; str_failed:
;     db ': Failed', 0
        ~3a ~20 ~46 ~61 ~69 ~6c   ~65 ~64 ~00

; str_done:
;     db 'Done: ', 0
                                              ~44 ~6f ~6e ~65 ~3a
~20 ~00

; str_num_passes:
;     db ' passes, ', 0
        ~20 ~70 ~61 ~73 ~73 ~65   ~73 ~2c ~20 ~00

; str_num_failures:
;     db ' failures', 0
                                                  ~20 ~66 ~61 ~69
~6c ~75 ~72 ~65 ~73 ~00

; times 0x200 - ($ - $$) db 0
                        ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x3200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Program
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; main:
    ; --------------------------------------------------------------------------
    ; Display the banner

~68 ~40 ~30     ; push str_banner
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

    ; --------------------------------------------------------------------------
    ; Run the tests

~b8 ~80 ~32     ; mov ax, run_tests
~ff ~d0         ; call ax

; .mainExit:
~c3             ; ret

; times 0x240 - ($ - $$) db 0
                        ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x3240
; ------------------------------------------------------------------------------
; print_test_number(test_number, passed)
;   Prints the message: "    Test {0}: Passed" or "    Test {0}: Failed".
;
;   Input
;     test_number - the number of the test
;     passed - non-zero if the test passed, 0 if the test failed
;   Returns
;     Nothing
; ------------------------------------------------------------------------------

; print_test_number:
~55             ; push bp
~89 ~e5         ; mov bp, sp

    ; print the prefix
~68 ~6f ~30     ; push str_test_number
~b8 ~03 ~00     ; mov ax, os_print_string
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

    ; print the test number
~6a ~67         ; push 'g'
~ff ~76 ~04     ; push word [bp + 4]
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

    ; print suffix
~83 ~7e ~06 ~00 ; cmp word [bp + 6], 0
~74 ~05         ; je .print_failed
~68 ~79 ~30     ; push str_passed
~eb ~03         ; jmp .print_suffix
; .print_failed:
~68 ~82 ~30     ; push str_failed
; .print_suffix:
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

; .exit:
~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x280 - ($ - $$) db 0
                    ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x3280
; ------------------------------------------------------------------------------
; run_tests()
;   Runs the unit tests.
;
;   Input
;     None
;   Returns
;     Nothing
; ------------------------------------------------------------------------------

; run_tests:
~55             ; push bp
~89 ~e5         ; mov bp, sp
~83 ~ec ~04     ; sub sp, 4                   ; int pass_count, int fail_count

~c7 ~46 ~fe ~00 ~00 ; mov word [bp - 2], 0    ; pass_count = 0
~c7 ~46 ~fc ~00 ~00 ; mov word [bp - 4], 0    ; fail_count = 0

~68 ~52 ~30     ; push str_running
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

    ; test os_print_int (and os_string_to_int and os_int_to_string)
~89 ~e8         ; mov ax, bp
~83 ~e8 ~04     ; sub ax, 4
~50             ; push ax                     ; fail_count = &fail_count
~83 ~c0 ~02     ; add ax, 2
~50             ; push ax                     ; pass_count = &pass_count
~b8 ~50 ~34     ; mov ax, test_os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

    ; print a blank line
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

  ; test_os_binary_search
~89 ~e8         ; mov ax, bp
~83 ~e8 ~04     ; sub ax, 4
~50             ; push ax                     ; fail_count = &fail_count
~83 ~c0 ~02     ; add ax, 2
~50             ; push ax                     ; pass_count = &pass_count
~b8 ~e0 ~35     ; mov ax, test_os_binary_search
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

    ; print a blank line
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

    ; see if we should print the "All tests passed!" message or a count of the failures
~8b ~46 ~fc     ; mov ax, [bp - 4]            ; AX = fail_count
~83 ~f8 ~00     ; cmp ax, 0
~75 ~14         ; jne .some_failures
~68 ~5d ~30     ; push str_all_tests_passed
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax
~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; .some_failures:
    ; print "Done: x passes, y failures"
~68 ~8b ~30     ; push str_done
~b8 ~03 ~00     ; mov ax, os_print_string
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~6a ~67         ; push 'g'
~ff ~76 ~fe     ; push word [bp - 2]          ; number = pass_count
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~68 ~92 ~30     ; push str_num_passes
~b8 ~03 ~00     ; mov ax, os_print_string
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~6a ~67         ; push 'g'
~ff ~76 ~fc     ; push word [bp - 4]          ; number = fail_count
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~68 ~9c ~30     ; push str_num_failures
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

    ; print a blank line
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x400 - ($ - $$) db 0
                                                          ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x3400
; ------------------------------------------------------------------------------
; test_os_print_int(int *pass_count, int *fail_count)
;   Runs the unit tests for os_print_int, os_int_to_string, and os_string_to_int.
;
;   Input
;     pass_count - pointer to store the count of tests that passed
;     fail_count - pointer to store the count of tests that failed
;   Returns
;     AX - non-zero if all tests succeeded, 0 if one or more tests failed
; ------------------------------------------------------------------------------

; 0x3400
; str_os_print_int:
;     db 'os_print_int', 0
~6f ~73 ~5f ~70 ~72 ~69 ~6e ~74   ~5f ~69 ~6e ~74 ~00

; str_os_print_int_expected:
;     db '  The number 2748 (0xABC) printed in d, g, x, X, 0x, and 0X', 0
                                                      ~20 ~20 ~54
~68 ~65 ~20 ~6e ~75 ~6d ~62 ~65   ~72 ~20 ~32 ~37 ~34 ~38 ~20 ~28
~30 ~78 ~41 ~42 ~43 ~29 ~20 ~70   ~72 ~69 ~6e ~74 ~65 ~64 ~20 ~69
~6e ~20 ~64 ~2c ~20 ~67 ~2c ~20   ~78 ~2c ~20 ~58 ~2c ~20 ~30 ~78
~2c ~20 ~61 ~6e ~64 ~20 ~30 ~58   ~00

; times 0x450 - ($ - $$) db 0
                                      ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x3450
; test_os_print_int:
~55             ; push bp
~89 ~e5         ; mov bp, sp
~83 ~ec ~06     ; sub sp, 6                   ; int test_number,
                                              ; int pass_count, int fail_count

~c7 ~46 ~fe ~01 ~00 ; mov word [bp - 2], 1    ; test_number = 1
~c7 ~46 ~fc ~00 ~00 ; mov word [bp - 4], 0    ; pass_count = 0
~c7 ~46 ~fa ~00 ~00 ; mov word [bp - 6], 0    ; fail_count = 0

~68 ~00 ~34     ; push str_os_print_int
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~68 ~0d ~34     ; push str_os_print_int_expected
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print 2748
~6a ~64         ; push 'd'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print 2,748
~6a ~67         ; push 'g'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print abc
~6a ~78         ; push 'x'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print ABC
~6a ~58         ; push 'X'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print 0xabc
~68 ~30 ~78     ; push '0x'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print 0XABC
~68 ~30 ~58     ; push '0X'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

    ; print a blank line
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x510 - ($ - $$) db 0
                            ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x3510
; ------------------------------------------------------------------------------
; run_tests_for_kernel_func(
;   int *pass_count,
;   int *fail_count,
;   char *function_name,
;   int test_count,
;   void *tests)
;
;   Helper method to run a series of tests for a kernel function.
;
;   Input
;     pass_count    - pointer to store the count of tests that passed
;     fail_count    - pointer to store the count of tests that failed
;     function_name - string name of the function being tested
;     test_count    - count of how many tests to run
;     tests         - an array of functions to call. Each function needs to have
;                     the following signature:
;                     `run()` where AX returns non-zero if the test succeeded
;                     and 0 if the test failed
;   Returns
;     AX - non-zero if all tests succeeded, 0 if one or more tests failed
; ------------------------------------------------------------------------------

; run_tests_for_kernel_func:
~55             ; push bp
~89 ~e5         ; mov bp, sp
~83 ~ec ~08     ; sub sp, 8                   ; int test_number, unused,
                                              ; int local_pass_count, local_fail_count

~c7 ~46 ~fe ~01 ~00 ; mov word [bp - 2], 1    ; test_number = 1
~c7 ~46 ~fa ~00 ~00 ; mov word [bp - 6], 0    ; local_pass_count = 0
~c7 ~46 ~f8 ~00 ~00 ; mov word [bp - 8], 0    ; local_fail_count = 0

~53             ; push bx
~51             ; push cx

    ; print the test name
~ff ~76 ~08     ; push word [bp + 8]          ; function_name
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

    ; loop through all of the tests
~31 ~c9         ; xor cx, cx                  ; i = 0
; .loop:
~3b ~4e ~0a     ; cmp cx, [bp + 10]           ; if (i >= test_count) break
~7d ~40         ; jge .return_counts

    ; call the next test
~8b ~46 ~0c     ; mov ax, [bp + 12]           ; AX = tests
~89 ~cb         ; mov bx, cx
~d1 ~e3         ; shl bx, 1                   ; BX = CX * 2
~01 ~c3         ; add bx, ax                  ; BX = tests + (CX * 2)
~8b ~07         ; mov ax, [bx]                ; AX = *BX
~ff ~d0         ; call ax
~83 ~f8 ~00     ; cmp ax, 0
~74 ~0f         ; je .test_fail
~ff ~46 ~fa     ; inc word [bp - 6]           ; pass_count++
~b8 ~01 ~00     ; mov ax, 1
~e8 ~18 ~00     ; call .print_test_result

    ; increment the loop counters
~41             ; inc cx                      ; i++
~ff ~46 ~fe     ; inc word [bp - 2]           ; test_number++
~eb ~da         ; jmp .loop

; .test_fail:
~50             ; push ax
~ff ~46 ~f8     ; inc word [bp - 8]           ; fail_count++
~b8 ~00 ~00     ; mov ax, 0
~e8 ~08 ~00     ; call .print_test_result
~58             ; pop ax
~ba ~1b ~00     ; mov dx, os_print_registers
~ff ~d2         ; call dx
~fa             ; cli
~f4             ; hlt

; .print_test_result:
~50             ; push ax                     ; passed
~ff ~76 ~fe     ; push word [bp - 2]          ; test_number
~b8 ~40 ~32     ; mov ax, print_test_number
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4
~c3             ; ret

; .return_counts:
~8b ~46 ~fa     ; mov ax, [bp - 6]            ; AX = pass_count
~8b ~5e ~04     ; mov bx, [bp + 4]            ; BX = &pass_count (arg)
~01 ~07         ; add [bx], ax                ; *pass_count (arg) += pass_count
~8b ~46 ~f8     ; mov ax, [bp - 8]            ; AX = fail_count
~8b ~5e ~06     ; mov bx, [bp + 6]            ; BX = &fail_count (arg)
~01 ~07         ; add [bx], ax                ; *fail_count (arg) += fail_count
~83 ~f8 ~00     ; cmp ax, 0
~74 ~05         ; je .all_passed
~b8 ~00 ~00     ; mov ax, 0
~eb ~03         ; jmp .exit
; .all_passed:
~b8 ~01 ~00     ; mov ax, 1
; .exit:
~59             ; pop cx
~5b             ; pop bx
~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x5c0 - ($ - $$) db 0
                                                  ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x35c0
; ------------------------------------------------------------------------------
; test_os_binary_search(int *pass_count, int *fail_count)
;   Runs the unit tests for os_binary_search.
;
;   Input
;     pass_count - pointer to store the count of tests that passed
;     fail_count - pointer to store the count of tests that failed
;   Returns
;     AX - non-zero if all tests succeeded, 0 if one or more tests failed
; ------------------------------------------------------------------------------

; 0x35c0
; str_os_binary_search:
;     db 'os_binary_search', 0
~6f ~73 ~5f ~62 ~69 ~6e ~61 ~72   ~79 ~5f ~73 ~65 ~61 ~72 ~63 ~68
~00

; 0x35d1
; binary_search_array:
;     db 0, 1, 2, 3
~00 ~01 ~02 ~03

; 0x35d5
; insertion_address:
;     dw 0
~00 ~00

; times 0x5e0 - ($ - $$) db 0
                            ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x35e0
; test_os_binary_search:
~55             ; push bp
~89 ~e5         ; mov bp, sp
~83 ~ec ~06     ; sub sp, 6                   ; void* tests[3]

~53             ; push bx

    ; initialize the test function array
~c7 ~46 ~fa ~20 ~36 ; mov word [bp - 6], .test1
~c7 ~46 ~fc ~60 ~36 ; mov word [bp - 4], .test2
~c7 ~46 ~fe ~b0 ~36 ; mov word [bp - 2], .test3

    ; call the runner
~8d ~46 ~fa     ; lea ax, [bp - 6]            ; AX = &tests
~50             ; push ax                     ; &tests
~6a ~03         ; push 3                      ; test_count
~68 ~c0 ~35     ; push str_os_binary_search   ; function_name
~ff ~76 ~06     ; push word [bp + 6]          ; fail_count = fail_count (arg)
~ff ~76 ~04     ; push word [bp + 4]          ; pass_count = pass_count (arg)
~b8 ~10 ~35     ; mov ax, run_tests_for_kernel_func
~ff ~d0         ; call ax

~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x620 - ($ - $$) db 0
                                                          ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

    ; --------------------------------------------------------------------------
    ; Test 1 - zero-length array should return NULL and insertion_address == base

; 0x3620
; .test1:
~68 ~d5 ~35     ; push insertion_address      ; insertion_address = &insertion_address
~68 ~00 ~37     ; push byte_compare           ; compare
~6a ~01         ; push 1                      ; width
~6a ~00         ; push 0                      ; num
~68 ~d1 ~35     ; push binary_search_array    ; base = binary_search_array
~6a ~02         ; push 2                      ; key
~b8 ~30 ~00     ; mov ax, os_binary_search
~ff ~d0         ; call ax
~83 ~c4 ~0c     ; add sp, 12

~83 ~f8 ~00     ; cmp ax, 0
~75 ~05         ; jne .test1_fail
~b8 ~01 ~00     ; mov ax, 1
~eb ~03         ; jmp .test1_done
; .test1_fail:
~b8 ~00 ~00     ; mov ax, 0
; .test1_done:
~c3             ; ret

; times 0x660 - ($ - $$) db 0
                    ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

    ; --------------------------------------------------------------------------
    ; Test 2 - even-length array should find every element

; 0x3660
; .test2:
~53             ; push bx
~51             ; push cx
~b9 ~00 ~00     ; mov cx, 0
; .test2_loop:
~6a ~00         ; push 0                      ; insertion_address = NULL
~68 ~00 ~37     ; push byte_compare           ; compare = byte_compare
~6a ~01         ; push 1                      ; width = 1
~6a ~04         ; push 4                      ; num = 4
~68 ~d1 ~35     ; push binary_search_array    ; base = binary_search_array
~b8 ~d1 ~35     ; mov ax, binary_search_array
~01 ~c8         ; add ax, cx
~50             ; push ax                     ; key = &binary_search_array[i]
~b8 ~30 ~00     ; mov ax, os_binary_search
~ff ~d0         ; call ax
~83 ~c4 ~0c     ; add sp, 12

~83 ~f8 ~00     ; cmp ax, 0
~74 ~11         ; je .test2_fail
~89 ~c3         ; mov bx, ax
~3b ~0f         ; cmp cx, [bx]
~75 ~0b         ; jne .test2_fail
~41             ; inc cx
~83 ~f9 ~01     ; cmp cx, 1
~7c ~d5         ; jl .test2_loop
~b8 ~01 ~00     ; mov ax, 1
~eb ~03         ; jmp .test2_done
; .test2_fail:
~b8 ~00 ~00     ; mov ax, 0
; .test2_done:
~59             ; pop cx
~5b             ; pop bx
~c3             ; ret

; times 0x6b0 - ($ - $$) db 0
                                              ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

    ; --------------------------------------------------------------------------
    ; Test 3 - odd-length array should find every element

; 0x36b0
; .test3:
~53             ; push bx
~51             ; push cx
~bb ~d1 ~35     ; mov bx, binary_search_array ; BX = &binary_search_array
~b9 ~00 ~00     ; mov cx, 0
; .test3_loop:
~6a ~00         ; push 0                      ; insertion_address = NULL
~68 ~00 ~37     ; push byte_compare           ; compare = byte_compare
~6a ~01         ; push 1                      ; width = 1
~6a ~03         ; push 3                      ; num = 3
~68 ~d1 ~35     ; push binary_search_array    ; base = binary_search_array
~51             ; push cx                     ; key = i
~b8 ~30 ~00     ; mov ax, os_binary_search
~ff ~d0         ; call ax
~83 ~c4 ~0c     ; add sp, 12

~29 ~c8         ; sub ax, cx
~3b ~07         ; cmp ax, [bx]
~75 ~0b         ; jne .test3_fail
~41             ; inc cx
~83 ~f9 ~04     ; cmp cx, 4
~7c ~df         ; jl .test3_loop
~b8 ~01 ~00     ; mov ax, 1
~eb ~03         ; jmp .test3_done
; .test3_fail:
~b8 ~00 ~00     ; mov ax, 0
; .test3_done:
~59             ; pop cx
~5b             ; pop bx
~c3             ; ret

; times 0x700 - ($ - $$) db 0
                ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x3700
; ------------------------------------------------------------------------------
; byte_compare(*byte1, *byte2)
;   Performs a comparison of 'byte1' and 'byte2' and returns a value that
;   indicates their relationship.
;
;   Input
;     *byte1 - pointer to the first byte to compare
;     *byte2 - pointer to the second byte to compare
;
;   Returns
;     AX - indicates the relation of 'byte1' to 'byte2', according to the table
;
;   |-----------|----------------------------------------|
;   | **Value** | **Relationship of 'byte1' to 'byte2'** |
;   | < 0       | 'byte1' is less than 'byte2'           |
;   | 0         | 'byte1' is identical to 'byte2'        |
;   | > 0       | 'byte1' is greater than 'byte2'        |
;
; ------------------------------------------------------------------------------

; byte_compare:
~55             ; push bp
~89 ~e5         ; mov bp, sp
~53             ; push bx
~8b ~5e ~04     ; mov bx, [bp + 4]            ; BX = byte1
~8a ~07         ; mov al, [bx]                ; AL = *byte1
~8b ~5e ~06     ; mov bx, [bp + 6]            ; BX = byte2
~8a ~1f         ; mov bl, [bx]                ; BL = *byte2
~38 ~d8         ; cmp al, bl
~7c ~04         ; jl .less_than
~7f ~07         ; jg .greater_than
~74 ~0a         ; je .equal
; .less_than:
~b8 ~ff ~ff     ; mov ax, -1
~eb ~08         ; jmp .exit
; .greater_than:
~b8 ~01 ~00     ; mov ax, 1
~eb ~03         ; jmp .exit
; .equal:
~b8 ~00 ~00     ; mov ax, 0
; .exit:
~5b             ; pop bx
~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x740 - ($ - $$) db 0
                        ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x3740
