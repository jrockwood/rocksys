;
; kernel_test.rasm
; ----------------
; Copyright (c) 2020 Justin Rockwood. All rights reserved.
;

; [BITS 16]               ; Tells the assembler to use 16 bit code
; [ORG 0x7000]            ; The kernel will load us into this address

; %include "syscalls.inc"

; start:
~e9 ~fd ~01 ; jmp main

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Data Section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 0x7003

            ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; times 0x40 - ($ - $$) db 0

; 0x7040
; str_banner:
;     db 'Kernel unit tests', 0
~4b ~65 ~72 ~6e ~65 ~6c ~20 ~75   ~6e ~69 ~74 ~20 ~74 ~65 ~73 ~74
~73 ~00

; str_running:
;     db 'Running...', 0
        ~52 ~75 ~6e ~6e ~69 ~6e   ~67 ~2e ~2e ~2e ~00

; str_all_tests_passed:
;     db 'All tests passed!', 0
                                                      ~41 ~6c ~6c
~20 ~74 ~65 ~73 ~74 ~73 ~20 ~70   ~61 ~73 ~73 ~65 ~64 ~21 ~00

; str_test_number:
;     db '    Test ', 0
                                                              ~20
~20 ~20 ~20 ~54 ~65 ~73 ~74 ~20   ~00

; str_passed:
;     db ': Passed', 0
                                      ~3a ~20 ~50 ~61 ~73 ~73 ~65
~64 ~00

; str_failed:
;     db ': Failed', 0
        ~3a ~20 ~46 ~61 ~69 ~6c   ~65 ~64 ~00

; str_done:
;     db 'Done: ', 0
                                              ~44 ~6f ~6e ~65 ~3a
~20 ~00

; str_num_passes:
;     db ' passes, ', 0
        ~20 ~70 ~61 ~73 ~73 ~65   ~73 ~2c ~20 ~00

; str_num_failures:
;     db ' failures', 0
                                                  ~20 ~66 ~61 ~69
~6c ~75 ~72 ~65 ~73 ~00

; times 0x200 - ($ - $$) db 0
                        ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x7200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Program
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; main:
    ; --------------------------------------------------------------------------
    ; Display the banner

~68 ~40 ~70     ; push str_banner
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

    ; --------------------------------------------------------------------------
    ; Run the tests

~b8 ~80 ~72     ; mov ax, run_tests
~ff ~d0         ; call ax

; mainExit:
~c3             ; ret

; times 0x240 - ($ - $$) db 0
                        ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x7240
; ------------------------------------------------------------------------------
; print_test_number(test_number, passed)
;   Prints the message: "    Test {0}: Passed" or "    Test {0}: Failed".
;
;   Input
;     test_number - the number of the test
;     passed - non-zero if the test passed, 0 if the test failed
;   Returns
;     Nothing
; ------------------------------------------------------------------------------

; print_test_number:
~55             ; push bp
~89 ~e5         ; mov bp, sp

    ; print the prefix
~68 ~6f ~70     ; push str_test_number
~b8 ~03 ~00     ; mov ax, os_print_string
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

    ; print the test number
~6a ~67         ; push 'g'
~ff ~76 ~04     ; push word [bp + 4]
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

    ; print suffix
~83 ~7e ~06 ~00 ; cmp word [bp + 6], 0
~74 ~05         ; je .print_failed
~68 ~79 ~70     ; push str_passed
~eb ~03         ; jmp .print_suffix
; .print_failed:
~68 ~82 ~70     ; push str_failed
; .print_suffix:
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

; .exit:
~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x280 - ($ - $$) db 0
                    ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x7280
; ------------------------------------------------------------------------------
; run_tests()
;   Runs the unit tests.
;
;   Input
;     None
;   Returns
;     Nothing
; ------------------------------------------------------------------------------

; run_tests:
~55             ; push bp
~89 ~e5         ; mov bp, sp
~83 ~ec ~04     ; sub sp, 4                   ; int pass_count, int fail_count

~c7 ~46 ~fe ~00 ~00 ; mov word [bp - 2], 0    ; pass_count = 0
~c7 ~46 ~fc ~00 ~00 ; mov word [bp - 4], 0    ; fail_count = 0

~68 ~52 ~70     ; push str_running
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

    ; test os_print_int (and os_string_to_int and os_int_to_string)
~89 ~e8         ; mov ax, bp
~83 ~e8 ~04     ; sub ax, 4
~50             ; push ax                     ; fail_count = &fail_count
~83 ~c0 ~02     ; add ax, 2
~50             ; push ax                     ; pass_count = &pass_count
~b8 ~50 ~74     ; mov ax, test_os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

    ; print a blank line
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

  ; test_os_binary_search
~89 ~e8         ; mov ax, bp
~83 ~e8 ~04     ; sub ax, 4
~50             ; push ax                     ; fail_count = &fail_count
~83 ~c0 ~02     ; add ax, 2
~50             ; push ax                     ; pass_count = &pass_count
~b8 ~20 ~75     ; mov ax, test_os_binary_search
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

    ; print a blank line
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

  ; test_os_malloc
~89 ~e8         ; mov ax, bp
~83 ~e8 ~04     ; sub ax, 4
~50             ; push ax                     ; fail_count = &fail_count
~83 ~c0 ~02     ; add ax, 2
~50             ; push ax                     ; pass_count = &pass_count
~b8 ~e0 ~76     ; mov ax, test_os_malloc
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

    ; print a blank line
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

    ; see if we should print the "All tests passed!" message or a count of the failures
~8b ~46 ~fc     ; mov ax, [bp - 4]            ; AX = fail_count
~83 ~f8 ~00     ; cmp ax, 0
~75 ~14         ; jne .some_failures
~68 ~5d ~70     ; push str_all_tests_passed
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax
~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

;.some_failures:
    ; print "Done: x passes, y failures"
~68 ~8b ~70     ; push str_done
~b8 ~03 ~00     ; mov ax, os_print_string
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~6a ~67         ; push 'g'
~ff ~76 ~fe     ; push word [bp - 2]          ; number = pass_count
~b8 ~4e ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~68 ~92 ~70     ; push str_num_passes
~b8 ~03 ~00     ; mov ax, os_print_string
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~6a ~67         ; push 'g'
~ff ~76 ~fc     ; push word [bp - 4]          ; number = fail_count
~b8 ~4e ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~68 ~9c ~70     ; push str_num_failures
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

    ; print a blank line
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x400 - ($ - $$) db 0
                    ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x7400
; ------------------------------------------------------------------------------
; test_os_print_int(int *pass_count, int *fail_count)
;   Runs the unit tests for os_print_int, os_int_to_string, and os_string_to_int.
;
;   Input
;     pass_count - pointer to store the count of tests that passed
;     fail_count - pointer to store the count of tests that failed
;   Returns
;     AX - non-zero if all tests succeeded, 0 if one or more tests failed
; ------------------------------------------------------------------------------

; 0x7400
; str_os_print_int:
;     db 'os_print_int', 0
~6f ~73 ~5f ~70 ~72 ~69 ~6e ~74   ~5f ~69 ~6e ~74 ~00

; str_os_print_int_expected:
;     db '  The number 2748 (0xABC) printed in d, g, x, X, 0x, and 0X', 0
                                                      ~20 ~20 ~54
~68 ~65 ~20 ~6e ~75 ~6d ~62 ~65   ~72 ~20 ~32 ~37 ~34 ~38 ~20 ~28
~30 ~78 ~41 ~42 ~43 ~29 ~20 ~70   ~72 ~69 ~6e ~74 ~65 ~64 ~20 ~69
~6e ~20 ~64 ~2c ~20 ~67 ~2c ~20   ~78 ~2c ~20 ~58 ~2c ~20 ~30 ~78
~2c ~20 ~61 ~6e ~64 ~20 ~30 ~58   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x7450
; test_os_print_int:
~55             ; push bp
~89 ~e5         ; mov bp, sp
~83 ~ec ~06     ; sub sp, 6               ; int test_number,
                                          ; int pass_count, int fail_count

~c7 ~46 ~fe ~01 ~00 ; mov word [bp - 2], 1    ; test_number = 1
~c7 ~46 ~fc ~00 ~00 ; mov word [bp - 4], 0    ; pass_count = 0
~c7 ~46 ~fa ~00 ~00 ; mov word [bp - 6], 0    ; fail_count = 0

~68 ~00 ~74     ; push str_os_print_int
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~68 ~0d ~74     ; push str_os_print_int_expected
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print 2748
~6a ~64         ; push 'd'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print 2,748
~6a ~67         ; push 'g'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print abc
~6a ~78         ; push 'x'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print ABC
~6a ~58         ; push 'X'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print 0xabc
~68 ~30 ~78     ; push '0x'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

~b8 ~0f ~00     ; mov ax, os_print_space
~ff ~d0         ; call ax

    ; print 0XABC
~68 ~30 ~58     ; push '0X'
~68 ~bc ~0a     ; push 0xabc
~b8 ~2d ~00     ; mov ax, os_print_int
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4

    ; print a blank line
~b8 ~09 ~00     ; mov ax, os_print_newline
~ff ~d0         ; call ax

~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x510 - ($ - $$) db 0
                            ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x7510
; ------------------------------------------------------------------------------
; test_os_binary_search(int *pass_count, int *fail_count)
;   Runs the unit tests for os_binary_search.
;
;   Input
;     pass_count - pointer to store the count of tests that passed
;     fail_count - pointer to store the count of tests that failed
;   Returns
;     AX - non-zero if all tests succeeded, 0 if one or more tests failed
; ------------------------------------------------------------------------------

; 0x7510
; str_os_binary_search:
;     db 'os_binary_search', 0
~6f ~73 ~5f ~62 ~69 ~6e ~61 ~72   ~79 ~5f ~73 ~65 ~61 ~72 ~63 ~68
~00

; times 0x7520 - ($ - $$) db 0
    ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x7520
; test_os_binary_search:
~55             ; push bp
~89 ~e5         ; mov bp, sp
~83 ~ec ~08     ; sub sp, 8               ; int test_number, void* insertion_address,
                                          ; int pass_count, int fail_count
~83 ~ec ~07     ; sub sp, 7               ; char even_array[4], char odd_array[3]

~c7 ~46 ~fe ~01 ~00 ; mov word [bp - 2], 1    ; test_number = 1
~c7 ~46 ~fa ~00 ~00 ; mov word [bp - 6], 0    ; pass_count = 0
~c7 ~46 ~f8 ~00 ~00 ; mov word [bp - 8], 0    ; fail_count = 0

~53             ; push bx

~68 ~10 ~75     ; push str_os_binary_search
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~89 ~eb         ; mov bx, bp
~83 ~eb ~0c     ; sub bx, 12          ; BX = even_array
~b0 ~00         ; mov al, 0
; .init_even:
~88 ~07         ; mov [bx], al
~fe ~c0         ; inc al
~43             ; inc bx
~3c ~04         ; cmp al, 4
~7c ~f7         ; jl .init_even
~89 ~eb         ; mov bx, bp
~83 ~eb ~0f     ; sub bx, 15         ; BX = odd_array
~b0 ~00         ; mov al, 0
; .init_odd:
~88 ~07         ; mov [bx], al
~fe ~c0         ; inc al
~43             ; inc bx
~3c ~03         ; cmp al, 3
~7c ~f7         ; jl .init_odd

    ; --------------------------------------------------------------------------
    ; Test 1 - zero-length array should return NULL and insertion_address == base

; .test1:
~89 ~eb         ; mov bx, bp
~83 ~eb ~0c     ; sub bx, 12          ; BX = even_array
~53             ; push bx

~89 ~e8         ; mov ax, bp
~83 ~e8 ~04     ; sub ax, 4
~50             ; push ax             ; insertion_address = &insertion_address
~68 ~a0 ~76     ; push byte_compare   ; compare
~6a ~01         ; push 1              ; width
~6a ~00         ; push 0              ; num
~53             ; push bx             ; base = even_array
~6a ~02         ; push 2              ; key
~b8 ~30 ~00     ; mov ax, os_binary_search
~ff ~d0         ; call ax
~83 ~c4 ~0c     ; add sp, 12

~5b             ; pop bx

~83 ~f8 ~00     ; cmp ax, 0
~75 ~12         ; jne .test1_fail
~8b ~46 ~fc     ; mov ax, [bp - 4]    ; AX = insertion_address
~39 ~d8         ; cmp ax, bx
~75 ~0b         ; jne .test1_fail
~ff ~46 ~fa     ; inc word [bp - 6]   ; pass_count++
~b8 ~01 ~00     ; mov ax, 1
~e8 ~0d ~00     ; call .print_test_result
~eb ~18         ; jmp .test2
; .test1_fail:
~ff ~46 ~f8     ; inc word [bp - 8]   ; fail_count++
~b8 ~00 ~00     ; mov ax, 0
~e8 ~02 ~00     ; call .print_test_result
~fa             ; cli
~f4             ; hlt

; .print_test_result:
~50             ; push ax              ; passed
~ff ~76 ~fe     ; push word [bp - 2]   ; test_number
~b8 ~40 ~72     ; mov ax, print_test_number
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4
~c3             ; ret

    ; --------------------------------------------------------------------------
    ; Test 2 - even-length array should find every element

; .test2:
~ff ~46 ~fe     ; inc word [bp - 2]   ; test_number++
~89 ~eb         ; mov bx, bp
~83 ~eb ~0c     ; sub bx, 12          ; BX = even_array
~b9 ~00 ~00     ; mov cx, 0
; .test2_loop:
~53             ; push bx
~51             ; push cx

~6a ~00         ; push 0              ; insertion_address = NULL
~68 ~a0 ~76     ; push byte_compare   ; compare
~6a ~01         ; push 1              ; width
~6a ~04         ; push 4              ; num
~53             ; push bx             ; base = even_array
~51             ; push cx             ; key
~b8 ~30 ~00     ; mov ax, os_binary_search
~ff ~d0         ; call ax
~83 ~c4 ~0c     ; add sp, 12

~59             ; pop cx
~5b             ; pop bx
~29 ~c8         ; sub ax, cx
~39 ~d8         ; cmp ax, bx
~75 ~11         ; jne .test2_fail
~41             ; inc cx
~83 ~f9 ~04     ; cmp cx, 4
~7c ~dd         ; jl .test2_loop
~ff ~46 ~fa     ; inc word [bp - 6]   ; pass_count++
~b8 ~01 ~00     ; mov ax, 1
~e8 ~12 ~00     ; call .print_test2_result
~eb ~1d         ; jmp .test3
; .test2_fail:
~ba ~1b ~00     ; mov dx, os_print_registers
~ff ~d2         ; call dx
~ff ~46 ~f8     ; inc word [bp - 8]   ; fail_count++
~b8 ~00 ~00     ; mov ax, 0
~e8 ~02 ~00     ; call .print_test2_result
~fa             ; cli
~f4             ; hlt
; .print_test2_result:
~50             ; push ax              ; passed
~ff ~76 ~fe     ; push word [bp - 2]   ; test_number
~b8 ~40 ~72     ; mov ax, print_test_number
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4
~c3             ; ret

    ; --------------------------------------------------------------------------
    ; Test 3 - odd-length array should find every element

; .test3:
~ff ~46 ~fe     ; inc word [bp - 2]   ; test_number++
~89 ~eb         ; mov bx, bp
~83 ~eb ~0f     ; sub bx, 15          ; BX = odd_array
~b9 ~00 ~00     ; mov cx, 0
; .test3_loop:
~53             ; push bx
~51             ; push cx

~6a ~00         ; push 0              ; insertion_address = NULL
~68 ~a0 ~76     ; push byte_compare   ; compare
~6a ~01         ; push 1              ; width
~6a ~03         ; push 3              ; num
~53             ; push bx             ; base = odd_array
~51             ; push cx             ; key
~b8 ~30 ~00     ; mov ax, os_binary_search
~ff ~d0         ; call ax
~83 ~c4 ~0c     ; add sp, 12

~59             ; pop cx
~5b             ; pop bx
~29 ~c8         ; sub ax, cx
~39 ~d8         ; cmp ax, bx
~75 ~11         ; jne .test3_fail
~41             ; inc cx
~83 ~f9 ~03     ; cmp cx, 3
~7c ~dd         ; jl .test3_loop
~ff ~46 ~fa     ; inc word [bp - 6]   ; pass_count++
~b8 ~01 ~00     ; mov ax, 1
~e8 ~12 ~00     ; call .print_test3_result
~eb ~1d         ; jmp .return_counts
; .test3_fail:
~ba ~1b ~00     ; mov dx, os_print_registers
~ff ~d2         ; call dx
~ff ~46 ~f8     ; inc word [bp - 8]   ; fail_count++
~b8 ~00 ~00     ; mov ax, 0
~e8 ~02 ~00     ; call .print_test3_result
~fa             ; cli
~f4             ; hlt
; .print_test3_result:
~50             ; push ax              ; passed
~ff ~76 ~fe     ; push word [bp - 2]   ; test_number
~b8 ~40 ~72     ; mov ax, print_test_number
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4
~c3             ; ret

; .return_counts:
~8b ~46 ~fa     ; mov ax, [bp - 6]    ; AX = pass_count
~8b ~5e ~04     ; mov bx, [bp + 4]    ; BX = &pass_count (arg)
~01 ~07         ; add [bx], ax        ; *pass_count (arg) += pass_count
~8b ~46 ~f8     ; mov ax, [bp - 8]    ; AX = fail_count
~8b ~5e ~06     ; mov bx, [bp + 6]    ; BX = &fail_count (arg)
~01 ~07         ; add [bx], ax        ; *fail_count (arg) += fail_count
~83 ~f8 ~00     ; cmp ax, 0
~74 ~05         ; je .all_passed
~b8 ~00 ~00     ; mov ax, 0
~eb ~03         ; jmp .exit
; .all_passed:
~b8 ~01 ~00     ; mov ax, 1
; .exit:
~5b             ; pop bx
~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x6a0 - ($ - $$) db 0
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x76a0
; ------------------------------------------------------------------------------
; byte_compare(byte1, *p_byte2)
;   Performs a comparison of 'byte1' and 'byte2' and returns a value that
;   indicates their relationship.
;
;   Input
;     byte1   - the first byte to compare
;     p_byte2 - pointer to the second byte to compare
;
;   Returns
;     AX - indicates the relation of 'byte1' to 'byte2', according to the table
;
;   |-----------|----------------------------------------|
;   | **Value** | **Relationship of 'byte1' to 'byte2'** |
;   | < 0       | 'byte1' is less than 'byte2'           |
;   | 0         | 'byte1' is identical to 'byte2'        |
;   | > 0       | 'byte1' is greater than 'byte2'        |
;
; ------------------------------------------------------------------------------

; byte_compare:
~55             ; push bp
~89 ~e5         ; mov bp, sp
~53             ; push bx
~8a ~46 ~04     ; mov al, [bp + 4]    ; AL = byte1
~8b ~5e ~06     ; mov bx, [bp + 6]
~8a ~1f         ; mov bl, [bx]        ; BL = byte2
~38 ~d8         ; cmp al, bl
~7c ~04         ; jl .less_than
~7f ~07         ; jg .greater_than
~74 ~0a         ; je .equal
; .less_than:
~b8 ~ff ~ff     ; mov ax, -1
~eb ~08         ; jmp .exit
; .greater_than:
~b8 ~01 ~00     ; mov ax, 1
~eb ~03         ; jmp .exit
; .equal:
~b8 ~00 ~00     ; mov ax, 0
; .exit:
~5b             ; pop bx
~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x6d0 - ($ - $$) db 0
                        ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x76d0
; ------------------------------------------------------------------------------
; test_os_malloc(int *pass_count, int *fail_count)
;   Runs the unit tests for os_malloc.
;
;   Input
;     pass_count - pointer to store the count of tests that passed
;     fail_count - pointer to store the count of tests that failed
;   Returns
;     AX - non-zero if all tests succeeded, 0 if one or more tests failed
; ------------------------------------------------------------------------------

; 0x76d0
; str_os_malloc:
;     db 'os_malloc', 0
~6f ~73 ~5f ~6d ~61 ~6c ~6c ~6f   ~63 ~00

; times 0x76e0 - ($ - $$) db 0
                                          ~00 ~00 ~00 ~00 ~00 ~00

; 0x76e0
; test_os_malloc:
~55             ; push bp
~89 ~e5         ; mov bp, sp
~83 ~ec ~08     ; sub sp, 8                   ; int test_number, unused,
                                              ; int pass_count, int fail_count

~c7 ~46 ~fe ~01 ~00 ; mov word [bp - 2], 1    ; test_number = 1
~c7 ~46 ~fa ~00 ~00 ; mov word [bp - 6], 0    ; pass_count = 0
~c7 ~46 ~f8 ~00 ~00 ; mov word [bp - 8], 0    ; fail_count = 0

~53             ; push bx

~68 ~d0 ~76     ; push str_os_malloc
~b8 ~06 ~00     ; mov ax, os_print_line
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

    ; --------------------------------------------------------------------------
    ; Test 1 - allocating a blocks of memory should return the correct addresses

; .test1:
~6a ~04         ; push 4                      ; size
~b8 ~33 ~00     ; mov ax, os_malloc
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2
~83 ~f8 ~02     ; cmp ax, 2                   ; return should be starting address
~75 ~1a         ; jne .test1_fail

~6a ~1c         ; push 28                     ; size
~b8 ~33 ~00     ; mov ax, os_malloc
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2
~83 ~f8 ~06     ; cmp ax, 6                   ; address should be 0x3000:0006
~75 ~0b         ; jne .test1_fail

~ff ~46 ~fa     ; inc word [bp - 6]           ; pass_count++
~b8 ~01 ~00     ; mov ax, 1
~e8 ~12 ~00     ; call .print_test1_result
~eb ~1d         ; jmp .test2
; .test1_fail:
~ba ~1b ~00     ; mov dx, os_print_registers
~ff ~d2         ; call dx
~ff ~46 ~f8     ; inc word [bp - 8]           ; fail_count++
~b8 ~00 ~00     ; mov ax, 0
~e8 ~02 ~00     ; call .print_test1_result
~fa             ; cli
~f4             ; hlt
; .print_test1_result:
~50             ; push ax                     ; passed
~ff ~76 ~fe     ; push word [bp - 2]          ; test_number
~b8 ~40 ~72     ; mov ax, print_test_number
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4
~c3             ; ret


    ; --------------------------------------------------------------------------
    ; Test 2 - allocating a block of memory that exceeds the remaining space
    ;          should return NULL

; .test2:
~ff ~46 ~fe     ; inc word [bp - 2]           ; test_number++
~89 ~eb         ; mov bx, bp

~68 ~ff ~ff     ; push 0xffff                 ; size
~b8 ~33 ~00     ; mov ax, os_malloc
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~83 ~f8 ~00     ; cmp ax, 0                   ; address should be NULL
~75 ~0b         ; jne .test2_fail
~ff ~46 ~fa     ; inc word [bp - 6]           ; pass_count++
~b8 ~01 ~00     ; mov ax, 1
~e8 ~12 ~00     ; call .print_test2_result
~eb ~1d         ; jmp .return_counts
; .test2_fail:
~ba ~1b ~00     ; mov dx, os_print_registers
~ff ~d2         ; call dx
~ff ~46 ~f8     ; inc word [bp - 8]           ; fail_count++
~b8 ~00 ~00     ; mov ax, 0
~e8 ~02 ~00     ; call .print_test2_result
~fa             ; cli
~f4             ; hlt
; .print_test2_result:
~50             ; push ax                     ; passed
~ff ~76 ~fe     ; push word [bp - 2]          ; test_number
~b8 ~40 ~72     ; mov ax, print_test_number
~ff ~d0         ; call ax
~83 ~c4 ~04     ; add sp, 4
~c3             ; ret

; .return_counts:
~8b ~46 ~fa     ; mov ax, [bp - 6]            ; AX = pass_count
~8b ~5e ~04     ; mov bx, [bp + 4]            ; BX = &pass_count (arg)
~01 ~07         ; add [bx], ax                ; *pass_count (arg) += pass_count
~8b ~46 ~f8     ; mov ax, [bp - 8]            ; AX = fail_count
~8b ~5e ~06     ; mov bx, [bp + 6]            ; BX = &fail_count (arg)
~01 ~07         ; add [bx], ax                ; *fail_count (arg) += fail_count
~83 ~f8 ~00     ; cmp ax, 0
~74 ~05         ; je .all_passed
~b8 ~00 ~00     ; mov ax, 0
~eb ~03         ; jmp .exit
; .all_passed:
~b8 ~01 ~00     ; mov ax, 1
; .exit:
~5b             ; pop bx
~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x730 - ($ - $$) db 0
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

