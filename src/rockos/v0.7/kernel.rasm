;
; kernel.rasm (Rockwood OS Kernel)
; --------------------------------
; Copyright (c) 2017 Justin Rockwood. All rights reserved.
;
; There is a pattern of leaving gaps between functions in case we need to extend
; them in the future. This ensures that we don't have to change memory addresses
; if we change the code. The 'times' command will do that for us, but we don't
; have an assembler yet, so we have to do it manually by filling in zeros.
;

; [BITS 16]               ; Tells the assembler to generate 16 bit code

; start:
~e9 ~fd ~00 ; jmp near kernel_main  ; keep to 3 bytes

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; System Calls Lookup
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; sys_call_table:
; This table contains a lookup of all of the system calls that we expose.
~e9 ~9a ~01 ; jmp os_print_string               ; 0x03
~e9 ~b7 ~01 ; jmp os_print_line                 ; 0x06
~e9 ~d4 ~01 ; jmp os_print_newline              ; 0x09
~e9 ~f1 ~01 ; jmp os_print_char                 ; 0x0c
~e9 ~0e ~02 ; jmp os_print_space                ; 0x0f
~e9 ~1b ~02 ; jmp os_print_hex_nibble           ; 0x12
~e9 ~58 ~02 ; jmp os_print_hex_byte             ; 0x15
~e9 ~85 ~02 ; jmp os_print_hex_word             ; 0x18
~e9 ~b2 ~02 ; jmp os_print_registers            ; 0x1b
~e9 ~1f ~03 ; jmp os_print_memory               ; 0x1e
~e9 ~6c ~03 ; jmp os_read_sectors               ; 0x21
~e9 ~89 ~03 ; jmp os_write_sectors              ; 0x24
~e9 ~66 ~04 ; jmp os_int_to_string              ; 0x27
~e9 ~43 ~05 ; jmp os_string_to_int              ; 0x2a
~e9 ~e0 ~05 ; jmp os_print_int                  ; 0x2d

; times 0x60 - ($ - $$) db 0

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Data Section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 0x60
; data_start:
; str_starting_kernel:
;     db `Starting kernel...`, 0
~53 ~74 ~61 ~72 ~74 ~69 ~6e ~67   ~20 ~6b ~65 ~72 ~6e ~65 ~6c ~2e
~2e ~2e ~00

; 0x73
; str_exiting:
;     db `Exiting RockOS`, 0
            ~45 ~78 ~69 ~74 ~69   ~6e ~67 ~20 ~52 ~6f ~63 ~6b ~4f
~53 ~00

; 0x82
    ~41 ~58 ~3a ~20 ~00 ; str_ax: db `AX: `, 0
~20 ~42 ~58 ~3a ~20 ~00 ; str_bx: db ` BX: `, 0
~20 ~43 ~58 ~3a ~20 ~00 ; str_cx: db ` CX: `, 0
~20 ~44 ~58 ~3a ~20 ~00 ; str_dx: db ` DX: `, 0
~20 ~53 ~49 ~3a ~20 ~00 ; str_si: db ` SI: `, 0
~20 ~44 ~49 ~3a ~20 ~00 ; str_di: db ` DI: `, 0
; 0xa5
    ~43 ~53 ~3a ~20 ~00 ; str_cs: db `CS: `, 0
~20 ~44 ~53 ~3a ~20 ~00 ; str_ds: db ` DS: `, 0
~20 ~45 ~53 ~3a ~20 ~00 ; str_es: db ` ES: `, 0
~20 ~46 ~53 ~3a ~20 ~00 ; str_fs: db ` FS: `, 0
~20 ~47 ~53 ~3a ~20 ~00 ; str_gs: db ` GS: `, 0
~20 ~53 ~53 ~3a ~20 ~00 ; str_ss: db ` SS: `, 0
~20 ~53 ~50 ~3a ~20 ~00 ; str_sp: db ` SP: `, 0

; End the data section at the 256th byte (0x100)
; times 0x100 - ($ - $$) db 0

                                                          ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Program
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; kernel_main:
    ; --------------------------------------------------------------------------
    ; The bootloader loads us at address 0x2000:0000, so set up the segment
    ; registers to all point to the same segment.

~fa         ; cli                 ; disable interrupts
~8c ~c8     ; mov ax, cs
~8e ~d8     ; mov ds, ax
~8e ~c0     ; mov es, ax
~8e ~e0     ; mov fs, ax
~8e ~e8     ; mov gs, ax

    ; --------------------------------------------------------------------------
    ; Create the stack at 0x2000:FFFF. It will move down in memory addresses.

~b8 ~00 ~20 ; mov ax, 0x2000
~8e ~d0     ; mov ss, ax
~bc ~ff ~ff ; mov sp, 0xffff
~fb         ; sti                 ; restore interrupts

~68 ~60 ~00 ; push str_starting_kernel
~b8 ~06 ~00 ; mov ax, os_print_line
~ff ~d0     ; call ax
~83 ~c4 ~02 ; add sp, 2
~b8 ~09 ~00 ; mov ax, os_print_newline
~ff ~d0     ; call ax

    ; --------------------------------------------------------------------------
    ; Load the program code from the 50th sector to address 0x2000:8000 and then
    ; start executing it. Load 24K worth of program binary code.

~68 ~00 ~80 ; push 0x8000         ; dest_address = 0x2000:8000
~6a ~30     ; push byte 48        ; sector_count
~6a ~31     ; push byte 49        ; sector_number
~b8 ~21 ~00 ; mov ax, os_read_sectors
~ff ~d0     ; call ax
~83 ~c4 ~06 ; add sp, 6
~bb ~00 ~80 ; mov bx, 0x8000
~ff ~d3     ; call bx

    ; --------------------------------------------------------------------------
    ; We're done

~b8 ~09 ~00 ; mov ax, os_print_newline
~ff ~d0     ; call ax
~68 ~73 ~00 ; push str_exiting
~b8 ~06 ~00 ; mov ax, os_print_line
~ff ~d0     ; call ax
~83 ~c4 ~02 ; add sp, 2
~fa         ; cli
~f4         ; hlt

; Start the system calls at 0x01a0.
; times 0x01a0 - ($ - $$) db 0

                                          ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; System Calls
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 0x1a0
; ------------------------------------------------------------------------------
; os_print_string(str)
;   Prints a string to the console.
;
;   Input
;     str - null terminated string to print
;
;   Returns
;     Nothing
; ------------------------------------------------------------------------------

; os_print_string:
~55         ; push bp
~89 ~e5     ; mov bp, sp
~60         ; pusha
~8b ~76 ~04 ; mov si, [bp + 4]    ; SI = str
~b4 ~0e     ; mov ah, 0x0e        ; INT 10h, AH=0Eh: write text in teletype mode
~31 ~db     ; xor bx, bx          ; BH = 0 page number (text modes) and
            ;                     ; BL = 0 foreground color (graphics modes only)
; .nextChar:
~ac         ; lodsb               ; loads the byte at DS:SI to AL and increment SI
~08 ~c0     ; or al, al           ; see if we've read the null termination
~74 ~04     ; jz .exit
~cd ~10     ; int 0x10            ; print the character
~eb ~f7     ; jmp .nextChar
; .exit:
~61         ; popa
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x01c0 - ($ - $$) db 0

                                      ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x1c0
; ------------------------------------------------------------------------------
; os_print_line(str)
;   Prints a string to the console, followed by a CR/LF combination.
;
;   Input
;     str - null terminated string to print
;
;   Returns
;     Nothing
; ------------------------------------------------------------------------------

; os_print_line:
~55         ; push bp
~89 ~e5     ; mov bp, sp
~ff ~76 ~04 ; push word [bp + 4]
~b8 ~03 ~00 ; mov ax, os_print_string
~ff ~d0     ; call ax
~83 ~c4 ~02 ; add sp, 2
~b8 ~09 ~00 ; mov ax, os_print_newline
~ff ~d0     ; call ax
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x1e0 - ($ - $$) db 0
                            ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x1e0
; ------------------------------------------------------------------------------
; os_print_newline()
;   Prints a CR/LF combination.
;
;   Input
;     Nothing
;   Returns
;     Nothing
; ------------------------------------------------------------------------------

; os_print_newline:
~6a ~0d     ; push `\r`
~b8 ~0c ~00 ; mov ax, os_print_char
~ff ~d0     ; call ax
~83 ~c4 ~02 ; add sp, 2
~6a ~0a     ; push `\n`
~b8 ~0c ~00 ; mov ax, os_print_char
~ff ~d0     ; call ax
~83 ~c4 ~02 ; add sp, 2
~c3         ; ret

; times 0x200 - ($ - $$) db 0
                    ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x200
; ------------------------------------------------------------------------------
; os_print_char(char)
;   Prints a character to the console.
;
;   Input
;     char - character to print
;
;   Returns
;     Nothing
; ------------------------------------------------------------------------------

; os_print_char:
~55         ; push bp
~89 ~e5     ; mov bp, sp
~60         ; pusha
~b4 ~0e     ; mov ah, 0x0e        ; INT 10h, AH=0Eh: write text in teletype mode
~31 ~db     ; xor bx, bx          ; BH = 0 page number (text modes) and
            ;                     ; BL = 0 foreground color (graphics modes only)
~8a ~46 ~04 ; mov al, [bp + 4]
~cd ~10     ; int 0x10            ; print the character
~61         ; popa
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

        ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x220
; ------------------------------------------------------------------------------
; os_print_space()
;   Prints a space character to the console.
;
;   Input
;     Nothing
;   Returns
;     Nothing
; ------------------------------------------------------------------------------

; os_print_space:
~6a ~20     ; push ' '
~b8 ~0c ~00 ; mov ax, os_print_char
~ff ~d0     ; call ax
~83 ~c4 ~02 ; add sp, 2
~c3         ; ret

; times 0x230 - ($ - $$) db 0
                                              ~00 ~00 ~00 ~00 ~00

; 0x230
; ------------------------------------------------------------------------------
; os_print_hex_nibble(nibble, should_print_prefix)
;   Prints the low nibble in hexidecimal format, with an optional prefix.
;
;   Input
;     nibble              - the nibble to print
;     should_print_prefix - non-zero if the '0x' prefix should be printed, 0 if no prefix
; ------------------------------------------------------------------------------

; os_print_hex_nibble:
~55         ; push bp
~89 ~e5     ; mov bp, sp
~60         ; pusha

~83 ~7e ~06 ~00 ; cmp word [bp + 6], 0; AX = should_print_prefix
~75 ~02     ; jne .print_prefix
~eb ~10     ; jmp .continue
; .print_prefix:
~6a ~30     ; push '0'
~b8 ~0c ~00 ; mov ax, os_print_char
~ff ~d0     ; call ax
~58         ; pop ax
~6a ~78     ; push 'x'
~b8 ~0c ~00 ; mov ax, os_print_char
~ff ~d0     ; call ax
~58         ; pop ax
; .continue:
~8a ~46 ~04 ; mov al, [bp + 4]
~24 ~0f     ; and al, 0x0F        ; mask out the high nibble and leave the low nibble
~3c ~09     ; cmp al, 9
~7e ~02     ; jle .print_digit
~04 ~07     ; add al, 'A' - '9' - 1   ; skip the punctuation between '9' and 'A' in the ASCII table
; .print_digit:
~04 ~30     ; add al, '0'         ; map the number to the ASCII characters
~50         ; push ax
~b8 ~0c ~00 ; mov ax, os_print_char
~ff ~d0     ; call ax
~58         ; pop ax

~61         ; popa
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x270 - ($ - $$) db 0
                    ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x270
; ------------------------------------------------------------------------------
; os_print_hex_byte(byte, should_print_prefix)
;   Prints the low byte in hexidecimal format, with an optional prefix.
;
;   Input
;     byte                - the byte to print
;     should_print_prefix - non-zero if the '0x' prefix should be printed, 0 if no prefix
; ------------------------------------------------------------------------------

; os_print_hex_byte:
~55         ; push bp
~89 ~e5     ; mov bp, sp
~60         ; pusha

    ; Print the high nibble, with the prefix if necessary.
~ff ~76 ~06 ; push word [bp + 6]
~8b ~46 ~04 ; mov ax, [bp + 4]
~c1 ~e8 ~04 ; shr ax, 4
~50         ; push ax
~b8 ~12 ~00 ; mov ax, os_print_hex_nibble
~ff ~d0     ; call ax
~83 ~c4 ~04 ; add sp, 4

    ; Print the low nibble, with no prefix.
~6a ~00     ; push 0
~ff ~76 ~04 ; push word [bp + 4]
~b8 ~12 ~00 ; mov ax, os_print_hex_nibble
~ff ~d0     ; call ax
~83 ~c4 ~04 ; add sp, 4

~61         ; popa
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x2a0 - ($ - $$) db 0
                                  ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x2a0
; ------------------------------------------------------------------------------
; os_print_hex_word(word, should_print_prefix)
;   Prints the word in hexidecimal format, with an optional prefix.
;
;   Input
;     word                - the word to print
;     should_print_prefix - non-zero if the '0x' prefix should be printed, 0 if no prefix
; ------------------------------------------------------------------------------

; os_print_hex_word:
~55         ; push bp
~89 ~e5     ; mov bp, sp
~60         ; pusha

    ; Print the high byte, with the prefix if necessary.
~ff ~76 ~06 ; push word [bp + 6]
~8b ~46 ~04 ; mov ax, [bp + 4]
~c1 ~e8 ~08 ; shr ax, 8
~50         ; push ax
~b8 ~15 ~00 ; mov ax, os_print_hex_byte
~ff ~d0     ; call ax
~83 ~c4 ~04 ; add sp, 4

    ; Print the low byte, with no prefix.
~6a ~00     ; push 0
~ff ~76 ~04 ; push word [bp + 4]
~b8 ~15 ~00 ; mov ax, os_print_hex_byte
~ff ~d0     ; call ax
~83 ~c4 ~04 ; add sp, 4

~61         ; popa
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x2d0 - ($ - $$) db 0
                                  ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x2d0
; ------------------------------------------------------------------------------
; os_print_registers()
;   Prints all of the general purpose register values. Useful for debugging.
; ------------------------------------------------------------------------------

; os_print_registers:
~55         ; push bp
~89 ~e5     ; mov bp, sp
~60         ; pusha

    ; Push the registers we want to print in reverse order.
~55         ; push bp
~68 ~c8 ~00 ; push str_sp
~16         ; push ss
~68 ~c2 ~00 ; push str_ss
~0f ~a8     ; push gs
~68 ~bc ~00 ; push str_gs
~0f ~a0     ; push fs
~68 ~b6 ~00 ; push str_fs
~06         ; push es
~68 ~b0 ~00 ; push str_es
~1e         ; push ds
~68 ~aa ~00 ; push str_ds
~0e         ; push cs
~68 ~a5 ~00 ; push str_cs

~57         ; push di
~68 ~9f ~00 ; push str_di
~56         ; push si
~68 ~99 ~00 ; push str_si
~52         ; push dx
~68 ~93 ~00 ; push str_dx
~51         ; push cx
~68 ~8d ~00 ; push str_cx
~53         ; push bx
~68 ~87 ~00 ; push str_bx
~50         ; push ax
~68 ~82 ~00 ; push str_ax

~b9 ~0d ~00 ; mov cx, 13
; .loop:
~83 ~f9 ~07 ; cmp cx, 7           ; print a new line after DI
~75 ~05     ; jne .continue
~b8 ~09 ~00 ; mov ax, os_print_newline
~ff ~d0     ; call ax
; .continue:
~58         ; pop ax              ; get the string to print
~50         ; push ax
~b8 ~03 ~00 ; mov ax, os_print_string
~ff ~d0     ; call ax
~58         ; pop ax              ; pop off the arg

~58         ; pop ax              ; get the register value
~6a ~01     ; push 1              ; should_print_prefix = true
~50         ; push ax             ; word = register
~b8 ~18 ~00 ; mov ax, os_print_hex_word
~ff ~d0     ; call ax
~83 ~c4 ~04 ; add sp, 4           ; pop off the args
~e2 ~e0     ; loop .loop

~b8 ~09 ~00 ; mov ax, os_print_newline
~ff ~d0     ; call ax

~61         ; popa
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x340 - ($ - $$) db 0
                            ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x340
; ------------------------------------------------------------------------------
; os_print_memory(address, line_count)
;   Prints the contents of memory at the specified address. Useful for debugging.
;
; Input
;   address    - the address of the memory to print
;   line_count - the number of lines of 8 bytes to print
; ------------------------------------------------------------------------------

; os_print_memory:
~55         ; push bp
~89 ~e5     ; mov bp, sp
~60         ; pusha

~83 ~7e ~06 ~00 ; cmp word [bp + 6], 0; if (line_loop <= 0) then .exit
~7e ~3d     ; jle .exit
; .line_loop:
    ; Print the starting address
~6a ~01     ; push 1              ; should_print_prefix = true
~ff ~76 ~04 ; push word [bp + 4]  ; address
~b8 ~18 ~00 ; mov ax, os_print_hex_word
~ff ~d0     ; call ax
~83 ~c4 ~04 ; add sp, 4           ; pop off the args

~b8 ~0f ~00 ; mov ax, os_print_space
~ff ~d0     ; call ax

~b9 ~08 ~00 ; mov cx, 8
; .byte_loop:
~6a ~00     ; push 0              ; should_print_prefix = false
~8b ~5e ~04 ; mov bx, [bp + 4]    ; BX = address
~8a ~1f     ; mov bl, [bx]        ; BX = &address
~53         ; push bx
~b8 ~15 ~00 ; mov ax, os_print_hex_byte
~ff ~d0     ; call ax
~83 ~c4 ~04 ; add sp, 4           ; pop off the args

~b8 ~0f ~00 ; mov ax, os_print_space
~ff ~d0     ; call ax
~ff ~46 ~04 ; inc word [bp + 4]   ; address++
~e2 ~e6     ; loop .byte_loop

~b8 ~09 ~00 ; mov ax, os_print_newline
~ff ~d0     ; call ax

~ff ~4e ~06 ; dec word [bp + 6]        ; line_count--
~83 ~7e ~06 ~00 ; cmp word [bp + 6], 0
~7f ~c3     ; jg .line_loop
; .exit:
~61         ; popa
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x390 - ($ - $$) db 0
                                                  ~00 ~00 ~00 ~00

; 0x390
; ------------------------------------------------------------------------------
; os_read_sectors(sector_number, sector_count, dest_address)
;   Reads the number of sectors from the floppy disk to the target address.
;
;   Input
;     sector_number - logical sector number to read (0-based)
;     sector_count  - number of sectors to read
;     dest_address  - destination address
;   Returns
;     AH - error code
;     AL - 1 if successful, 0 if error
; ------------------------------------------------------------------------------

; os_read_sectors:
~55         ; push bp
~89 ~e5     ; mov bp, sp

~6a ~01     ; push 1              ; is_read
~ff ~76 ~08 ; push word [bp + 8]  ; address
~ff ~76 ~06 ; push word [bp + 6]  ; sector_count
~ff ~76 ~04 ; push word [bp + 4]  ; sector_number
~b8 ~f0 ~03 ; mov ax, _read_write_sectors
~ff ~d0     ; call ax
~83 ~c4 ~08 ; add sp, 8

~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x3b0 - ($ - $$) db 0
                                          ~00 ~00 ~00 ~00 ~00 ~00

; 0x3b0
; ------------------------------------------------------------------------------
; os_write_sectors(sector_number, sector_count, source_address)
;   Writes sector_count number of sectors from source_address to disk starting
;   at sector_number.
;
;   Input
;     sector_number  - logical sector number to write (0-based)
;     sector_count   - number of sectors to write
;     source_address - source address
;   Returns
;     AH - error code
;     AL - 1 if successful, 0 if error
; ------------------------------------------------------------------------------

; os_write_sectors:
~55         ; push bp
~89 ~e5     ; mov bp, sp

~6a ~00     ; push 0              ; is_read
~ff ~76 ~08 ; push word [bp + 8]  ; address
~ff ~76 ~06 ; push word [bp + 6]  ; sector_count
~ff ~76 ~04 ; push word [bp + 4]  ; sector_number
~b8 ~f0 ~03 ; mov ax, _read_write_sectors
~ff ~d0     ; call ax
~83 ~c4 ~08 ; add sp, 8

~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x3d0 - ($ - $$) db 0
                                          ~00 ~00 ~00 ~00 ~00 ~00

; 0x3d0
; ------------------------------------------------------------------------------
; _reset_disk(drive_number)
;   Reset the disk so the head is at sector 1.
;
;   Input
;     drive_number - drive number (0 is the first floppy drive, A:)
;   Output
;     AH - error code
;     AL - 1 if successful, 0 if error
; ------------------------------------------------------------------------------

; _reset_disk:
~55         ; push bp
~89 ~e5     ; mov bp, sp
~8a ~56 ~04 ; mov dl, [bp + 4]    ; DL = drive_number
~b9 ~03 ~00 ; mov cx, 3           ; only try 3 times
; .loop:
~b0 ~01     ; mov al, 1           ; assume there is no error before we try
~b4 ~00     ; mov ah, 0           ; INT 13h, AH=00h: reset disk drive
~cd ~13     ; int 0x13
~73 ~04     ; jnc .exit           ; no error, so we're done
~e2 ~f6     ; loop .loop
~b0 ~00     ; mov al, 0           ; there was an error
; .exit:
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x3f0 - ($ - $$) db 0
                                      ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x3f0
; ------------------------------------------------------------------------------
; _read_write_sectors(sector_number, sector_count, address, is_read)
;   Reads the number of sectors from the floppy disk to the target address.
;
;   Input
;     sector_number - logical sector number to read (0-based)
;     sector_count  - number of sectors to read
;     dest_address  - destination address
;     is_read       - 1 if a read operation should be performed, 0 if a write
;   Returns
;     AH - error code
;     AL - 1 if successful, 0 if error
; ------------------------------------------------------------------------------

; _read_write_sectors:
~55         ; push bp
~89 ~e5     ; mov bp, sp

    ; --------------------------------------------------------------------------
    ; Reset the floppy disk so the head is at the first sector.

~6a ~00     ; push 0              ; drive 0 = "A:", the first floppy drive
~b8 ~d0 ~03 ; mov ax, _reset_disk
~ff ~d0     ; call ax
~5b         ; pop bx              ; pop the arguments
~3c ~00     ; cmp al, 0
~74 ~3b     ; je .exit            ; return if there was an error
            ;                     ; AH already contains the error code

    ; --------------------------------------------------------------------------
    ; Read the sectors from the disk, one sector at a time.

~83 ~7e ~06 ~00 ; cmp word [bp + 6], 0; if (sector_count <= 0) exit
~7e ~35     ; jle .error
; .loop:
~ff ~76 ~04 ; push word [bp + 4]  ; sector_number
~b8 ~40 ~04 ; mov ax, _lba_to_chs ; convert the logical sector to a CHS tuple
~ff ~d0     ; call ax
~58         ; pop ax              ; pop the argument
~8b ~5e ~08 ; mov bx, [bp + 8]    ; BX = address
~83 ~7e ~0a ~00 ; cmp word [bp + 10], 0   ; if (!is_read) do_write
~74 ~04     ; je .do_write
~b4 ~02     ; mov ah, 2           ; INT 13h, AH=02h: read sectors from drive
~eb ~02     ; jmp .do_disk_op
; .do_write:
~b4 ~03     ; mov ah, 3           ; INT 13h, AH=03h: write sectors to drive
; .do_disk_op:
~b0 ~01     ; mov al, 1           ; read/write one sector
~cd ~13     ; int 0x13
~72 ~15     ; jc .error           ; return if there was an error (CF is set)
~81 ~46 ~08 ~00 ~02 ; add word [bp + 8], 512   ; address += 512
~ff ~46 ~04 ; inc word [bp + 4]   ; sector_number++
~ff ~4e ~06 ; dec word [bp + 6]   ; sector_count--
~83 ~7e ~06 ~00 ; cmp word [bp + 6], 0     ; if (sector_count > 0) .read_sector
~7f ~d1     ; jg .loop
; .success:
~b0 ~01     ; mov al, 1           ; success
~eb ~02     ; jmp .exit
; .error:
~b0 ~00     ; mov al, 0           ; error
; .exit:
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x440 - ($ - $$) db 0
                                                          ~00 ~00

; 0x440
; ------------------------------------------------------------------------------
; _lba_to_chs(lba)
;   Converts a logical block address (LBA) to a cylinder, head, and sector (CHS)
;   tuple for use in BIOS disk operations. Note that we're straying from the
;   cdecl convention by returning values in CX and DX instead of AX and DX. This
;   is for simplicity since the CX and DX registers are filled in with the
;   required parameters for the BIOS read/write sectors calls.
;
;   Input
;     lba - Logical block address (LBA)
;   Output
;     DH - The head number
;     DL - The drive to read from/write to
;     CH - Cylinder
;     CL - Sector
; ------------------------------------------------------------------------------

; _lba_to_chs:
~55         ; push bp
~89 ~e5     ; mov bp, sp

~83 ~ec ~04 ; sub sp, 4               ; allocate space for two local variables
~c7 ~46 ~fe ~12 ~00 ; mov word [bp - 2], 18   ; sectors_per_track = 18
~c7 ~46 ~fc ~02 ~00 ; mov word [bp - 4], 2    ; heads_per_cylinder = 2

    ; --------------------------------------------------------------------------
    ; From https://en.wikipedia.org/wiki/Logical_block_addressing#CHS_conversion
    ;   HPC = Heads per cylinder
    ;   SPT = Sectors per track
    ; We're hard-coding these values right now assuming a standard IBM 3.5",
    ; 1.44 MB floppy disk.
    ;   HPC = 2
    ;   SPT = 18

    ; Sector = (LBA % SPT) + 1
~ba ~00 ~00 ; mov dx, 0
~8b ~46 ~04 ; mov ax, [bp + 4]    ; AX = lba
~f7 ~76 ~fe ; div word [bp - 2]   ; DX = LBA % sectors_per_track
~83 ~c2 ~01 ; add dx, 1           ; DX = (LBA % SPT) + 1
~88 ~d1     ; mov cl, dl          ; CL = sector

    ; Cylinder = LBA / (HPC * SPT)
~ba ~00 ~00 ; mov dx, 0
~8b ~46 ~fc ; mov ax, [bp - 4]    ; AX = heads_per_cylinder
~f7 ~66 ~fe ; mul word [bp - 2]   ; AX = HPC * SPT
~8b ~5e ~04 ; mov bx, [bp + 4]    ; BX = lba
~93         ; xchg ax, bx         ; AX = lba; BX = HPC * SPT
~f7 ~f3     ; div bx              ; AX = LBA / (HPC * SPT)
~88 ~c5     ; mov ch, al          ; CH = cylinder

    ; Head = (LBA / SPT) % HPC
~ba ~00 ~00 ; mov dx, 0
~8b ~46 ~04 ; mov ax, [bp + 4]    ; AX = lba
~f7 ~76 ~fe ; div word [bp - 2]   ; AX = LBA / SPT
~ba ~00 ~00 ; mov dx, 0
~f7 ~76 ~fc ; div word [bp - 4]   ; DX = (LBA / SPT) % HPC
~88 ~d6     ; mov dh, dl          ; DH = head

    ; Drive
~b2 ~00     ; mov dl, 0           ; DL = 0 = A: drive

~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x490 - ($ - $$) db 0
                        ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x490
; ------------------------------------------------------------------------------
; os_int_to_string(number, format, *buffer)
;   Converts an integer to a string using a specified format.
;
;   Input
;     number - number to convert
;     format - see the note below for formats
;     buffer - memory address containing space for at least 7 characters
;   Returns
;     AX - 1 if successful, 0 if the format is invalid.
;
;   The format can be one of the following values:
;   * 'd' - decimal number with no formatting
;   * 'g' - decimal number with commas as thousands separators
;   * 'x' - hexidecimal number with no prefix and lower-case letters
;   * 'X' - hexidecimal number with no prefix and upper-case letters
;   * '0x' - hexidecimal number with prefix and lower-case letters
;   * '0X' - hexidecimal number with prefix and upper-case letters
; ------------------------------------------------------------------------------

; os_int_to_string:
~55         ; push bp
~89 ~e5     ; mov bp, sp
~83 ~ec ~06 ; sub sp, 6                             ; allocate space for local variables
~c7 ~46 ~fe ~0a ~00 ; mov word [bp - 2], 10         ; radix
~c7 ~46 ~fc ~57 ~00 ; mov word [bp - 4], 'a' - 10   ; hex_base_char
~c7 ~46 ~fa ~00 ~00 ; mov word [bp - 6], 0          ; comma_position

    ; Set DI to the start of the buffer
~8b ~7e ~08 ; mov di, [bp + 8]

    ; --------------------------------------------------------------------------
    ; Parse the format and set local variables
~8b ~46 ~06 ; mov ax, [bp + 6]    ; format

    ; --------------------------------------------------------------------------
    ; Determine whether we'll need to print a comma

    ; No comma for anything other than 'general' format
~83 ~f8 ~67 ; cmp ax, 'g'
~75 ~0c     ; jne .set_radix

    ; No comma for numbers less than 1,000
~81 ~7e ~04 ~e8 ~03 ; cmp word [bp + 4], 1000
~7c ~05     ; jl .set_radix
~c7 ~46 ~fa ~03 ~00 ; mov word [bp - 6], 3    ; comma_position

    ; --------------------------------------------------------------------------
    ; Determine which radix to use (10 for decimal or base 16 for hexidecimal)

; .set_radix:
~83 ~f8 ~67 ; cmp ax, 'g'
~74 ~26     ; je .convert
~83 ~f8 ~64 ; cmp ax, 'd'
~74 ~21     ; je .convert
~c7 ~46 ~fe ~10 ~00 ; mov word [bp - 2], 16   ; radix = 16 for hex numbers
~3d ~30 ~78 ; cmp ax, '0x'
~74 ~16     ; je .add_prefix
~83 ~f8 ~78 ; cmp ax, 'x'
~74 ~12     ; je .convert
~c7 ~46 ~fc ~37 ~00 ; mov word [bp - 4], 'A'  ; hex_base_char = upper case
~3d ~30 ~58 ; cmp ax, '0X'
~74 ~07     ; je .add_prefix
~83 ~f8 ~58 ; cmp ax, 'X'
~74 ~03     ; je .convert
~eb ~0b     ; jmp .error          ; unknown format
; .add_prefix:
~ab         ; stosw               ; the format string is the same as the prefix
; .convert:
~b8 ~20 ~05 ; mov ax, _int_to_dec
~ff ~d0     ; call ax
~b8 ~01 ~00 ; mov ax, 1           ; AX = 1 means success
~eb ~09     ; jmp .exit
; .error:
~8b ~7e ~08 ; mov di, [bp + 8]    ; DI = buffer
~c6 ~05 ~00 ; mov byte [di], 0    ; null-terminate the buffer
~b8 ~00 ~00 ; mov ax, 0           ; AX = 0 means an error happened
; .exit:
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x0520 - ($ - $$) db 0
                                                          ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x0520
; _int_to_dec:
~8b ~46 ~04 ; mov ax, [bp + 4]    ; AX = number
~b9 ~00 ~00 ; mov cx, 0           ; counter = 0
~8b ~5e ~fe ; mov bx, [bp - 2]    ; divide by the radix
; .push_digits:
~ba ~00 ~00 ; mov dx, 0
~f7 ~f3     ; div bx              ; divide DX:AX by BX and store the quotient:remainder in AX:DX
~52         ; push dx             ; push the remainder (digit) onto the stack
~41         ; inc cx              ; counter++
~3b ~46 ~fe ; cmp ax, [bp - 2]    ; if the quotient >= radix, then keep pushing digits
~7d ~f4     ; jge .push_digits
~83 ~f8 ~00 ; cmp ax, 0
~7f ~02     ; jg .write_significant
~eb ~02     ; jmp .write_digits   ; skip writing the initial '0'
; .write_significant:
~50         ; push ax
~41         ; inc cx
; .write_digits:
    ; Now write the digits in reverse order from most significant to least significant
    ; See if we should print the comma
~8b ~46 ~fa ; mov ax, [bp - 6]    ; comma_position
~39 ~c1     ; cmp cx, ax
~75 ~04     ; jne .write_digit
; .write_comma:
~c6 ~05 ~2c ; mov byte [di], ','
~47         ; inc di
; .write_digit:
~58         ; pop ax
~3c ~09     ; cmp al, 9
~7f ~04     ; jg .convert_hex
~04 ~30     ; add al, '0'         ; convert the decimal to ASCII
~eb ~03     ; jmp .store_digit
; .convert_hex:
~02 ~46 ~fc ; add al, [bp - 4]    ; convert the hex to ASCII by adding the hex_base_char
; .store_digit:
~88 ~05     ; mov [di], al
~47         ; inc di
~e2 ~e4     ; loop .write_digits
~c6 ~05 ~00 ; mov byte [di], 0    ; write the null termination
~c3         ; ret

; times 0x0570 - ($ - $$) db 0
                                                          ~00 ~00
~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00

; 0x0570
; ------------------------------------------------------------------------------
; os_string_to_int(string, format)
;   Converts a string into an integer.
;
;   Input
;     string - address of a null-terminated string to convert
;     format - see the note below for formats
;   Returns
;     AX - the converted number
;     DX - 1 if successful, 0 if the format is invalid.
;
;   The format can be one of the following values:
;   * 'd' - decimal number with no formatting
;   * 'g' - decimal number with commas as thousands separators
;   * 'x' - hexidecimal number with no prefix and lower-case letters
;   * 'X' - hexidecimal number with no prefix and upper-case letters
;   * '0x' - hexidecimal number with prefix and lower-case letters
;   * '0X' - hexidecimal number with prefix and upper-case letters
;
;   Parsing using a given format is done in a non-strict way. As such, the 'd'
;   and 'g' format are treated the same and the 'x', 'X', '0x', and '0X' formats
;   are treated the same.
; ------------------------------------------------------------------------------

; os_string_to_int:
~55         ; push bp
~89 ~e5     ; mov bp, sp
~83 ~ec ~04 ; sub sp, 4               ; allocate space for local variables
~c7 ~46 ~fe ~0a ~00 ; mov word [bp - 2], 10   ; radix = 10
~c7 ~46 ~fc ~00 ~00 ; mov word [bp - 4], 0    ; result = 0

    ; Set SI to the string
~8b ~76 ~04 ; mov si, [bp + 4]

    ; Skip the prefix if necessary.
~8b ~46 ~06 ; mov ax, [bp + 6]    ; AX = format
~3d ~30 ~78 ; cmp ax, '0x'
~74 ~1b     ; je .skip_prefix
~3d ~30 ~58 ; cmp ax, '0X'
~74 ~16     ; je .skip_prefix
~83 ~f8 ~78 ; cmp ax, 'x'
~74 ~13     ; je .parse_hex
~83 ~f8 ~58 ; cmp ax, 'X'
~74 ~0e     ; je .parse_hex
~83 ~f8 ~64 ; cmp ax, 'd'
~74 ~0e     ; je .check_empty
~83 ~f8 ~67 ; cmp ax, 'g'
~74 ~09     ; je .check_empty
~eb ~55     ; jmp .error
; .skip_prefix:
    ; Skip the '0x' or '0X' prefix
~ac         ; lodsb
~ac         ; lodsb
; .parse_hex:
~c7 ~46 ~fe ~10 ~00 ; mov word [bp - 2], 16   ; radix = 16
; .check_empty:
~ac         ; lodsb
~3c ~00     ; cmp al, 0
~74 ~49     ; je .error
; .loop:
~3c ~2c     ; cmp al, ','
~74 ~02     ; je .skip_comma
~eb ~07     ; jmp .conv_dec
; .skip_comma:
    ; Commas are only allowed if we're parsing decimals (not hex)
~83 ~7e ~fe ~0a ; cmp word [bp - 2], 10 ; if (radix != 10) jmp .error
~75 ~3d     ; jne .error
~ac         ; lodsb               ; skip the comma
; .conv_dec:
~3c ~30     ; cmp al, '0'
~7c ~38     ; jl .error
~3c ~39     ; cmp al, '9'
~7f ~04     ; jg .conv_hex_upper
~2c ~30     ; sub al, '0'         ; convert ASCII to number
~eb ~1a     ; jmp .conv
; .conv_hex_upper:
~3c ~41     ; cmp al, 'A'
~7c ~2c     ; jl .error
~3c ~46     ; cmp al, 'F'
~7f ~06     ; jg .con_hex_lower
~2c ~41     ; sub al, 'A'
~04 ~0a     ; add al, 10
~eb ~0c     ; jmp .conv
; .con_hex_lower:
~3c ~61     ; cmp al, 'a'
~7c ~1e     ; jl .error
~3c ~66     ; cmp al, 'f'
~7f ~1a     ; jg .error
~2c ~61     ; sub al, 'a'
~04 ~0a     ; add al, 10
; .conv:
~b4 ~00     ; mov ah, 0
~89 ~c3     ; mov bx, ax          ; BX = digit
~8b ~46 ~fc ; mov ax, [bp - 4]    ; AX = number
~f7 ~66 ~fe ; mul word [bp - 2]   ; AX *= radix
~01 ~d8     ; add ax, bx          ; AX += digit
~89 ~46 ~fc ; mov [bp - 4], ax    ; result = AX
~ac         ; lodsb
~3c ~00     ; cmp al, 0
~75 ~b9     ; jne .loop
~eb ~05     ; jmp .success
; .error:
~ba ~00 ~00 ; mov dx, 0           ; DX = error
~eb ~03     ; jmp .exit
; .success:
~ba ~01 ~00 ; mov dx, 1           ; DX = success
; .exit:
~8b ~46 ~fc ; mov ax, [bp - 4]    ; AX = result
~89 ~ec     ; mov sp, bp
~5d         ; pop bp
~c3         ; ret

; times 0x0610 - ($ - $$) db 0
                                           ~00 ~00 ~00 ~00 ~00 ~00

; 0x0610
; ------------------------------------------------------------------------------
; os_print_int(number, format)
;   Prints an integer using the specified format.
;
;   Input
;     number - number to convert
;     format - see the note below for formats
;   Returns
;     Nothing
;
;   The format can be one of the following values:
;   * 'd' - decimal number with no formatting
;   * 'g' - decimal number with commas as thousands separators
;   * 'x' - hexidecimal number with no prefix and lower-case letters
;   * 'X' - hexidecimal number with no prefix and upper-case letters
;   * '0x' - hexidecimal number with prefix and lower-case letters
;   * '0X' - hexidecimal number with prefix and upper-case letters
; ------------------------------------------------------------------------------

; os_print_int:
~55             ; push bp
~89 ~e5         ; mov bp, sp
~83 ~ec ~08     ; sub sp, 8               ; char[8] buffer

~54             ; push sp                 ; buffer = &buffer
~ff ~76 ~06     ; push word [bp + 6]      ; format = format
~ff ~76 ~04     ; push word [bp + 4]      ; number = number
~b8 ~27 ~00     ; mov ax, 0x27            ; os_int_to_string
~ff ~d0         ; call ax
~83 ~c4 ~06     ; add sp, 6

~54             ; push sp                 ; buffer = &buffer
~b8 ~03 ~00     ; mov ax, 0x03            ; os_print_string
~ff ~d0         ; call ax
~83 ~c4 ~02     ; add sp, 2

~89 ~ec         ; mov sp, bp
~5d             ; pop bp
~c3             ; ret

; times 0x9a0 - ($ - $$) db 0
        ~00 ~00 ~00 ~00 ~00 ~00   ~00 ~00 ~00 ~00 ~00 ~00 ~00 ~00
